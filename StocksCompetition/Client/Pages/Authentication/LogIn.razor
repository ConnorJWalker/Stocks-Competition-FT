@inject ServerService ServerService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<EditForm class="auth-form" EditContext="@_editContext" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    
    <h1>Log In</h1>
    <div class="form-group">
        <div class="text-input-group">
            <ValidationMessage For="() => _logInForm.DiscordUsername" />
            <InputText placeholder="Discord Username"
                type="text"
                @bind-Value="_logInForm.DiscordUsername"
                style="margin-bottom: 10px"/>

            <ValidationMessage For="() => _logInForm.Password"/>
            <InputText placeholder="Password"
                type="password"
                @bind-Value="_logInForm.Password"/>
        </div>
    </div>

    <footer>
        <button class="link" @onclick="() => OnSignUpClick.InvokeAsync()">Sign Up</button>
        <button class="btn-pink" type="submit">Log In</button>
    </footer>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnSignUpClick { get; set; }

    private readonly LogInForm _logInForm = new();

    private EditContext? _editContext;

    private async Task OnSubmit()
    {
        JwtResponse response = await ServerService.LogIn(_logInForm);
        await LocalStorage.SetItemAsync("token", response);
        StateHasChanged();
        
        NavigationManager.NavigateTo("", true);
    }
    
    protected override void OnInitialized()
    {
        _editContext = new EditContext(_logInForm);
    }
}
